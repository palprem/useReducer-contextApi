Import & Exports(Modules): Import default and only export of the file Name in the receiving file is up to you
exp:1. const person = {name:'Max}
       export default person

       import person from './person' 

    2. export const clean = () => { }
       export const baseData = () => 10;

       import { baseData } from './xyz'
       import { clean } from './xyz'

Spread Operator(...): Used to split up array elements OR object properties
    const newArray = [...oldArry, 1,2]
    const newObject = {...oldObject, newProp:5}

Rest Operator: Used to merge a list of function arguments in to array
diffrance b/w Spread and Rest: 
    The spread operator allows us to spread the value of an array (or any iterable) 
    across zero or more arguments in a function or elements in an array (or any iterable). 
    The rest parameter allows us to pass an indefinite number of parameters to a function and access them in an array.

    React JS useRef Hook
Difficulty Level : Basic
Last Updated : 19 Oct, 2021
The useRef hook is the new addition in React 16.8. Before proceeding to this article there is a prerequisite to know about the ref in react.
The useRef is a hook that allows to directly create a reference to the DOM element in the functional component. 

Syntax:

const refContainer = useRef(initialValue);
The useRef returns a mutable ref object. This object has a property called .current. The value is persisted in the refContainer.current property. These values are accessed from the current property of the returned object. The .current property could be initialised to the passed argument initialValue e.g. useRef(initialValue). The object can persist a value for a full lifetime of the component. 

Example: How to access the DOM using useRef hook.



import React, {Fragment, useRef} from 'react';
 
function App() {
 
  // Creating a ref object using useRef hook
  const focusPoint = useRef(null);
  const onClickHandler = () => {
    focusPoint.current.value =
      "The quick brown fox jumps over the lazy dog";
      focusPoint.current.focus();
  };
  return (
    <Fragment>
      <div>
        <button onClick={onClickHandler}>
         ACTION
        </button>
      </div>
      <label>
       Click on the action button to
       focus and populate the text.
      </label><br/>
      <textarea ref={focusPoint} />
    </Fragment>
  );
};
 
export default App;
 
 

Output: In this example, we have a button called ACTION, whenever we click on the button the onClickHandler is getting triggered 
and it’s focusing the textarea with help of useRef hook. The focusPoint is the useRef object which is initialised to null and the 
value is changing to onClick event. Let’s see the output of the above code.

In this post we’ll cover what the useRef Hook is, what we can use it for and some advice for using it.
The useRef Hook is a function that returns a mutable ref object whose .current property is initialized with the passed argument 
(initialValue). The returned object will persist for the full lifetime of the component.
const refContainer = useRef(initialValue);
There are two main uses of useRef that are explained in the following sections: Accessing the DOM nodes or React elements and keeping a mutable variable.
Accessing the DOM nodes or React elements
If you’ve worked with React for a while, you might be used to using refs for this purpose. Below there’s an example of the use of refs in class components:

What are controlled and uncontrolled components?
    In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, 
    where form data is handled by the DOM itself. To write an uncontrolled component, instead of writing an event handler for every state 
    update, you can use a ref to get form values from the DOM.

useReducer: useReducer just like useState, its always return array
  const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn)
  state: the state snapshot used in the component re-render/ re-evaluation cycle
  dispatchFn: a function
  that can be used to dispatch a new action(i.e triger an update of the function)
  reducerFn: (prevState, action) => newState
  A function that is triggered automaticly once an action is dispatched(via dispatchFn())
  it receives the latest state snapshot and should return the udated state
  initialState: the initial State
  initFn: a function to set the initial state programmatically

Context-API: Context-api provides a way to pass data through the component tree without having to pass props down manually at every level.
  1: create React.createContext
  2: Provider- The component that provides the value
  3: Consumer- A component that is consuming the value
  * import React from 'react';
    const ColorContext = React.createContext('while');export default ColorContext

  Limitations: Reatc COntext is Not optimized for high frequency changes